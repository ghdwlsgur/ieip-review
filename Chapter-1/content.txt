### 1장 응용 SW 기초 기술 활용

Windows 기본 명령어
DIR               파일 목록 표시
COPY              파일 복사
TYPE              파일의 내용 표시
REN               파일의 이름 변경
DEL               파일 삭제
MD                디렉토리 생성
CD                디렉토리의 위치 변경
CLS               화면의 내용을 지운다.
ATTRIB            파일의 속성 변경
FIND              파일 찾기
CHKDSK            디스크 상태 점검
FORMAT            디스크 표면을 트랙과 섹터로 나누어 초기화
MOVE              파일 이동

UNIX/LINUX 기본 명령어
cat               파일 내용을 화면에 표시   
chdir             현재 사용할 디렉터리의 위치를 변경
chmod             파일의 보호 모드를 설정하여 파일의 사용 허가를 지정
chown             소유자를 변경 
cp                파일을 복사
exec              새로운 프로세스를 수행
find              파일을 찾는다.
fork              새로운 프로세스를 생성한다(하위 프로세스 호출, 프로세스 복제 명령).
fsck              파일 시스템을 검사하고 보수한다.
getpid            자신의 프로세스 아이디를 얻는다.
getppid           부모 프로세스 아이디를 얻는다.
ls                현재 디렉토리 내의 파일 목록 확인
mount/unmount     파일 시스템을 마운팅한다/마운팅 해제한다.
rm                파일을 삭제 
uname             시스템의 이름과 버전, 네트워크 호스트명 등의 시스템 정보를 표시한다.
wait              fork 후 exec에 의해 실행되는 프로세스의 상위 프로세스가 하위 프로세스 종료 등의 event를 기다린다.
kill              프로세스 제거
&                 백그라운드 처리를 위해 명령의 끝에 입력한다.
ps                현재 작업중인 프로세스의 상태 정보를 확인한다.
mkfs              파일시스템을 생성한다.
finger            사용자 정보를 표시한다.

프로세스 생성
UNIX와 LINUX에서 새로운 프로세스를 생성한다는 것은 기존 프로세스를 복제한다는 것을 의미합니다.
프로세스가 생성되면 기존 프로세스는 상위(부모) 프로세스가 되고, 생성된 프로세스는 하위(자식)
프로세스가 됩니다.

포그라운드 작업과 백그라운드 작업
몇 개의 앱이 동시에 실행될 때 전면에서 실행되는 우선순위가 가장 높은 작업을 포그라운드 작업이라
하고, 같은 상황에서 우선순위가 낮아 화면에 보이지 않고 실행되는 작업을 백그라운드 작업이라고 합니다.
다시 말해 사용자가 현재 직접 하고 있는 작업은 포그라운드 작업이고, 그와 동시에 백그라운드 작업이 
이루어지고 있습니다.


function test() {
  return Promise.all([getTest(), getApply()]).then()
}
test().then(console.log)

async function main() {
  const promises = [];
  for (var i = 0; i < 10; i++) {
    promises.push(asyncHello(i))
  }
  await Promise.all(promises);
}